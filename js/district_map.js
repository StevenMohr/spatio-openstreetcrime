// Generated by CoffeeScript 1.3.3
var DistrictMap, GeoReceiver, MapControls, MapData, MapStyle, server_url,
  _this = this;

server_url = "http://localhost:8000";

$(document).ready(function() {
  GeoReceiver.init();
  return $('button').click(function() {
    return MapControls.toggle_district_layer();
  });
});

DistrictMap = {
  map: void 0,
  district_layer: void 0,
  initialize: function() {
    var epsg4326, epsg900913, layer, vector_layer;
    epsg4326 = new OpenLayers.Projection('EPSG:4326');
    epsg900913 = new OpenLayers.Projection('EPSG:900913');
    this.map = new OpenLayers.Map('map', {
      projection: epsg900913,
      displayProjection: epsg4326
    });
    layer = new OpenLayers.Layer.OSM();
    this.map.addLayer(layer);
    this.map.setCenter(new OpenLayers.LonLat(13, 52).transform(epsg4326, epsg900913), 8);
    vector_layer = new OpenLayers.Layer.Vector("Berlin Districts");
    return this.add_district_layer();
  },
  center_map: function(center_x, center_y) {
    return this.map.setCenter((new OpenLayers.LonLat(center_x, center_y)).transform("EPSG:4326", "EPSG:900913"), 8);
  },
  add_district_layer: function() {
    var features, geojson_format;
    geojson_format = new OpenLayers.Format.GeoJSON();
    this.district_layer = new OpenLayers.Layer.Vector("Berlin Districts");
    this.district_layer.removeAllFeatures();
    features = geojson_format.read(MapData.district_feature_collection());
    this.district_layer.addFeatures(features);
    return this.map.addLayer(this.district_layer);
  }
};

MapData = {
  map_data: [],
  weighted: false,
  district_feature_collection: function() {
    var district, district_feature, featurecollection, _i, _len, _ref;
    featurecollection = {
      "type": "FeatureCollection",
      "features": [
        {
          "geometry": {
            "type": "GeometryCollection",
            "geometries": []
          },
          "type": "Feature",
          "properties": {}
        }
      ]
    };
    _ref = this.map_data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      district = _ref[_i];
      district_feature = district['area'];
      featurecollection.features[0].geometry.geometries.push(district_feature);
    }
    return featurecollection;
  },
  district_color: function(count) {
    var colors, i, quantil, _i, _len, _ref;
    colors = ['#00ff00', '#ffff00', '#df7401', '#df0101'];
    i = 0;
    _ref = this.quantils();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      quantil = _ref[_i];
      if (count < quantil) {
        break;
      }
      i++;
    }
    return colors[i];
  },
  quantils: function() {
    if (this.weighted) {
      return [5];
    } else {
      return [5];
    }
  }
};

MapStyle = {
  renderer: function() {
    var renderer;
    return renderer = OpenLayers.Layer.Vector.prototype.renderers;
  },
  layer_style: function() {
    var layer_style;
    layer_style = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style['default']);
    layer_style.fillOpacity = 0.8;
    layer_style.graphicOpacity = 1;
    return layer_style;
  },
  style: function(color) {
    var style;
    style = OpenLayers.Util.extend({}, this.layer_style());
    style.strokeColor = 'red';
    style.fillColor = 'red';
    return style;
  }
};

MapControls = {
  toggle_district_layer: function() {
    var button;
    button = $('#button');
    if (button.text() === "Change to Weighted") {
      MapData.weighted = true;
      button.text('Change to Normal');
    } else {
      MapData.weighted = false;
      button.text('Change to Weighted');
    }
    return DistrictMap.add_district_layer();
  },
  update_legend: function() {
    var i, quantil, quantils, _i, _len;
    i = 0;
    quantils = MapData.quantils();
    for (_i = 0, _len = quantils.length; _i < _len; _i++) {
      quantil = quantils[_i];
      $("#quantil" + i).text("less than " + quantil);
      i++;
    }
    return $("#quantil3").text("greater than or equal to " + quantils[2]);
  }
};

GeoReceiver = {
  init: function() {
    var settings;
    settings = {
      dataType: 'jsonp',
      url: "" + server_url + "/api/v1/districts/?community__state__name=Berlin",
      success: GeoReceiver.process_districts
    };
    return $.ajax(settings);
  },
  process_districts: function(data) {
    var settings;
    MapData.map_data = MapData.map_data.concat(data['objects']);
    console.log(data.meta);
    if (data.meta.next != null) {
      settings = {
        dataType: 'jsonp',
        url: server_url + data.meta.next,
        success: GeoReceiver.process_districts
      };
      return $.ajax(settings);
    } else {
      return DistrictMap.initialize();
    }
  }
};
