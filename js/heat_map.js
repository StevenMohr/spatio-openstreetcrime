// Generated by CoffeeScript 1.3.3
var MapStyle, OsmHeatMap;

OsmHeatMap = {
  map: void 0,
  initialize: function() {
    var epsg4326, epsg900913, layer;
    epsg4326 = new OpenLayers.Projection('EPSG:4326');
    epsg900913 = new OpenLayers.Projection('EPSG:900913');
    this.map = new OpenLayers.Map('heat_map', {
      projection: epsg900913,
      displayProjection: epsg4326
    });
    layer = new OpenLayers.Layer.OSM();
    this.map.addLayer(layer);
    this.map.setCenter(new OpenLayers.LonLat(13, 52).transform(epsg4326, epsg900913), 8);
    return this.add_heatmap_layer();
  },
  add_district_layer: function() {
    var feature, features, vectorLayer, _i, _len;
    vectorLayer = new OpenLayers.Layer.Vector("Berlin Districts", {
      style: MapStyle.layer_style(),
      renderers: MapStyle.renderer()
    });
    features = MapData.district_feature_collection();
    for (_i = 0, _len = features.length; _i < _len; _i++) {
      feature = features[_i];
      feature.style.fillColor = 'white';
      feature.style.strokeColor = 'white';
    }
    vectorLayer.addFeatures(features);
    return this.map.addLayer(vectorLayer);
  },
  add_heatmap_layer: function() {
    var crime_data, epsg4326, epsg900913, heatmapLayer, report, x, _i, _j, _len, _ref;
    epsg4326 = new OpenLayers.Projection('EPSG:4326');
    epsg900913 = new OpenLayers.Projection('EPSG:900913');
    crime_data = {
      max: 10,
      data: []
    };
    _ref = ReportReceiver.reports;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      report = _ref[_i];
      for (x = _j = 0; _j <= 10; x = ++_j) {
        crime_data.data.push({
          lonlat: new OpenLayers.LonLat(13, 52)
        });
      }
    }
    heatmapLayer = new OpenLayers.Layer.Heatmap("Heatmap Layer", this.map, crime_data, {
      visible: true,
      radius: 40
    }, {
      isBaseLayer: false,
      opacity: 0.6
    });
    return this.map.addLayer(heatmapLayer);
  }
};

MapStyle = {
  renderer: function() {
    var renderer;
    renderer = OpenLayers.Util.getParameters(window.location.href).renderer;
    return renderer = (renderer ? [renderer] : OpenLayers.Layer.Vector.prototype.renderers);
  },
  layer_style: function() {
    var layer_style;
    layer_style = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style['default']);
    layer_style.fillOpacity = 0.3;
    layer_style.graphicOpacity = 1;
    return layer_style;
  },
  style: function(color) {
    var style;
    style = OpenLayers.Util.extend({}, this.layer_style());
    style.strokeColor = color;
    style.fillColor = color;
    return style;
  }
};
